{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAE(Variational AutoEncoder)의 사본","provenance":[{"file_id":"1rAhksFSTsU8mXOsHPFKv0rushCEhCL-G","timestamp":1579663973024},{"file_id":"16UKC9IKniTbu4BgdDiksSkyP9ECE3Gfn","timestamp":1579563363893},{"file_id":"1vgJPqpeR_C_IdP4C1LQCosjHFnmdmnSd","timestamp":1579505164410}],"collapsed_sections":[],"authorship_tag":"ABX9TyP91fwmMiM+NCflTSiASCho"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"S_ERPcbk9Bbb","colab_type":"code","outputId":"09979d4d-d1ad-4387-c7c0-ecd3462b4930","executionInfo":{"status":"ok","timestamp":1579666381674,"user_tz":-540,"elapsed":2634,"user":{"displayName":"김평","photoUrl":"","userId":"04344772263897215175"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","!ls /content/gdrive/My\\ Drive/"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"," 사진   celeba\t'Colab Notebooks'   model\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QXqMnGdXc2sg","colab_type":"code","outputId":"cbfff1d0-f4b7-4b34-bdb1-b8ee3bd2ce9b","executionInfo":{"status":"ok","timestamp":1579666381677,"user_tz":-540,"elapsed":2624,"user":{"displayName":"김평","photoUrl":"","userId":"04344772263897215175"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["from __future__ import print_function\n","#%matplotlib inline\n","import argparse\n","import os\n","import random\n","import torch\n","import torch.nn as nn\n","import torch.nn.parallel\n","import torch.backends.cudnn as cudnn\n","import torch.optim as optim\n","import torch.utils.data\n","import torchvision.datasets as dset\n","import torchvision.transforms as transforms\n","import torchvision.utils as vutils\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.animation as animation\n","from IPython.display import HTML\n","from torch.autograd import Variable\n","import torchvision\n","\n","import torchvision\n","from torchvision import transforms\n","\n","from torch.utils.data import DataLoader\n","\n","\n","# Set random seed for reproducibility\n","manualSeed = 999\n","#manualSeed = random.randint(1, 10000) # use if you want new results\n","print(\"Random Seed: \", manualSeed)\n","random.seed(manualSeed)\n","torch.manual_seed(manualSeed)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Random Seed:  999\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f647dcd2070>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"Iyc3Oj9edACG","colab_type":"code","colab":{}},"source":["# Root directory for dataset\n","dataroot = \"/content/gdrive/My Drive/celeba/\"\n","\n","# Number of workers for dataloader\n","workers = 2\n","\n","# Batch size during training\n","batch_size = 128\n","\n","# Spatial size of training images. All images will be resized to this\n","#   size using a transformer.\n","image_size = 64\n","\n","# Number of channels in the training images. For color images this is 3\n","nc = 3\n","\n","# Size of z latent vector (i.e. size of generator input)\n","nz = 100\n","\n","# Size of feature maps in generator\n","ngf = 64\n","\n","# Size of feature maps in discriminator\n","ndf = 64\n","\n","# Number of training epochs\n","num_epochs = 50\n","\n","# Learning rate for optimizers\n","lr = 0.0001\n","\n","# Beta1 hyperparam for Adam optimizers\n","beta1 = 0.5\n","\n","# Number of GPUs available. Use 0 for CPU mode.\n","ngpu = 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"toL9dtEkuvGX","colab_type":"code","outputId":"0db6985c-d5dd-41eb-d54d-9a1cb78bff35","executionInfo":{"status":"ok","timestamp":1579666381679,"user_tz":-540,"elapsed":2611,"user":{"displayName":"김평","photoUrl":"","userId":"04344772263897215175"}},"colab":{"base_uri":"https://localhost:8080/","height":56}},"source":["\"\"\"\n","dataset = dset.ImageFolder(root=dataroot,\n","                           transform=transforms.Compose([\n","                               transforms.Resize(image_size),\n","                               transforms.CenterCrop(image_size),\n","                           ]))\n","\n","for num, value in enumerate(dataset):\n","    data, label = value\n","    data.save('/content/gdrive/My Drive/celeba/transformed/transformed_faces/%d.jpeg'%(num))\n","\n","\"\"\""],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\ndataset = dset.ImageFolder(root=dataroot,\\n                           transform=transforms.Compose([\\n                               transforms.Resize(image_size),\\n                               transforms.CenterCrop(image_size),\\n                           ]))\\n\\nfor num, value in enumerate(dataset):\\n    data, label = value\\n    data.save('/content/gdrive/My Drive/celeba/transformed/transformed_faces/%d.jpeg'%(num))\\n\\n\""]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"Vy94CWmIdFzL","colab_type":"code","outputId":"c7c8d6ac-e53d-437b-f084-6e85dcaba6a6","executionInfo":{"status":"error","timestamp":1579668495355,"user_tz":-540,"elapsed":33936,"user":{"displayName":"김평","photoUrl":"","userId":"04344772263897215175"}},"colab":{"base_uri":"https://localhost:8080/","height":405}},"source":["# We can use an image folder dataset the way we have it setup.\n","# Create the dataset\n","\n","\n","dataset = dset.ImageFolder(root='/content/gdrive/My Drive/celeba/transformed/',\n","                           transform=transforms.Compose([\n","                                transforms.ToTensor(),\n","                                transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n","                                ]))\n","\n","for num, value in enumerate(dataset):\n","    data, label = value\n","    torch.save(data, '/content/gdrive/My Drive/celeba/dataset/transform/%d.pt'%(num))"],"execution_count":10,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-da8f0dace250>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mnum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'/content/gdrive/My Drive/celeba/dataset/transform/%d.pt'\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(obj, f, pickle_module, pickle_protocol)\u001b[0m\n\u001b[1;32m    258\u001b[0m         \u001b[0;34m>>\u001b[0m\u001b[0;34m>\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m     \"\"\"\n\u001b[0;32m--> 260\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_with_file_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"wb\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_save\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpickle_module\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpickle_protocol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    261\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36m_with_file_like\u001b[0;34m(f, mode, body)\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnew_fd\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m             \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"mO6CIAQ3lRVe","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":213},"outputId":"b6e30633-f249-455d-f916-110285392ba3","executionInfo":{"status":"error","timestamp":1579669174616,"user_tz":-540,"elapsed":755,"user":{"displayName":"김평","photoUrl":"","userId":"04344772263897215175"}}},"source":["dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,\n","                                         shuffle=True, num_workers=workers)\n","\n","dataset = dset.DatasetFolder(root='/content/gdrive/My Drive/celeba/dataset/', loader=dataloader, is_valid_file=pt)"],"execution_count":18,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-da005841dd6d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m                                          shuffle=True, num_workers=workers)\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDatasetFolder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'/content/gdrive/My Drive/celeba/dataset/'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdataloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_valid_file\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'pt' is not defined"]}]},{"cell_type":"code","metadata":{"id":"9qWURYqPWBBs","colab_type":"code","colab":{}},"source":["dataset = dset.ImageFolder(root='/content/gdrive/My Drive/celeba/dataset/')\n","\n","# Create the dataloader\n","dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,\n","                                         shuffle=True, num_workers=workers)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HfR4Dj7EdNEb","colab_type":"code","colab":{}},"source":["# custom weights initialization called on netG and net_EN\n","def weights_init(m):\n","    classname = m.__class__.__name__\n","    if classname.find('Conv') != -1:\n","        nn.init.normal_(m.weight.data, 0.0, 0.02)\n","    elif classname.find('BatchNorm') != -1:\n","        nn.init.normal_(m.weight.data, 1.0, 0.02)\n","        nn.init.constant_(m.bias.data, 0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"C6qWg5vldP_b","colab_type":"code","colab":{}},"source":["# Generator Code\n","\n","class DECODER(nn.Module):\n","    def __init__(self):\n","        super(DECODER, self).__init__()\n","        self.main = nn.Sequential(\n","            # input is Z, going into a convolution\n","            nn.ConvTranspose2d( nz, ngf * 8, 4, 1, 0, bias=False),\n","            nn.BatchNorm2d(ngf * 8),\n","            nn.ReLU(True),\n","            # state size. (ngf*8) x 4 x 4\n","            nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ngf * 4),\n","            nn.ReLU(True),\n","            # state size. (ngf*4) x 8 x 8\n","            nn.ConvTranspose2d( ngf * 4, ngf * 2, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ngf * 2),\n","            nn.ReLU(True),\n","            # state size. (ngf*2) x 16 x 16\n","            nn.ConvTranspose2d( ngf * 2, ngf, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ngf),\n","            nn.ReLU(True),\n","            # state size. (ngf) x 32 x 32\n","            nn.ConvTranspose2d( ngf, nc, 4, 2, 1, bias=False),\n","            nn.Tanh()\n","            # state size. (nc) x 64 x 64\n","        )\n","\n","    def forward(self, input):\n","        return self.main(input)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FBCZtPNldT0j","colab_type":"code","colab":{}},"source":["# Create the generator\n","net_DE = DECODER().cuda()\n","\n","\n","# Apply the weights_init function to randomly initialize all weights\n","#  to mean=0, stdev=0.2.\n","net_DE.apply(weights_init)\n","\n","# Print the model\n","print(net_DE)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7TBDbeOIdWv7","colab_type":"code","colab":{}},"source":["class ENCODER(nn.Module):\n","    def __init__(self):\n","        super(ENCODER, self).__init__()\n","        self.conv = nn.Sequential(\n","            # input is (nc) x 64 x 64\n","            nn.Conv2d(nc, ndf, 4, 2, 1, bias=False),\n","            nn.LeakyReLU(0.2, inplace=True),\n","            # state size. (ndf) x 32 x 32\n","            nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ndf * 2),\n","            nn.LeakyReLU(0.2, inplace=True),\n","            # state size. (ndf*2) x 16 x 16\n","            nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ndf * 4),\n","            nn.LeakyReLU(0.2, inplace=True),\n","            # state size. (ndf*4) x 8 x 8\n","            nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ndf * 8),\n","            nn.ReLU(),\n","            # state size. (ndf*8) x 4 x 4\n","            )\n","        self.linear_mu = nn.Linear(8192, nz)\n","        self.linear_log = nn.Linear(8192, nz)\n","\n","    def encode(self, x):\n","        x = self.conv(x)\n","        x = x.view(x.size(0), -1)\n","        mu = self.linear_mu(x)\n","        log_var = self.linear_log(x)\n","        return mu, log_var\n","\n","    def reparametrize(self, mu, log_var):\n","        std = log_var.mul(0.5).exp_()\n","        eps = torch.FloatTensor(std.size()).normal_()\n","        eps = eps.cuda()\n","        return eps.mul(std).add_(mu)\n","\n","    def forward(self, x):\n","        mu, log_var = self.encode(x)\n","        reparam = self.reparametrize(mu, log_var)\n","        return mu, log_var, reparam"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kl8P9ir6dZ5L","colab_type":"code","colab":{}},"source":["# Create the Discriminator\n","net_EN = ENCODER().cuda()\n","\n","\n","\n","# Apply the weights_init function to randomly initialize all weights\n","#  to mean=0, stdev=0.2.\n","net_EN.apply(weights_init)\n","\n","# Print the model\n","print(net_EN)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WZn1XVkqdcXc","colab_type":"code","colab":{}},"source":["# Initialize BCELoss function\n","reconstruction_loss = nn.MSELoss()\n","\n","def criteiron(recon_input, x, mu, log_var):\n","    BCE = reconstruction_loss(recon_input, x)\n","    KLD_element = mu.pow(2).add_(log_var.exp()).mul_(-1).add_(1).add_(log_var)\n","    KLD = torch.sum(KLD_element).mul_(-0.5)\n","\n","    return BCE + KLD\n","# Create batch of latent vectors that we will use to visualize\n","#  the progression of the generator\n","fixed_noise = torch.randn(64, nz, 1, 1).cuda()\n","\n","\n","# Setup Adam optimizers for both G and D\n","parameters = list(net_EN.parameters())+ list(net_DE.parameters())\n","optimizer = torch.optim.Adam(parameters, lr=lr, betas=(beta1, 0.999))\n","#optimizer_EN = optim.Adam(net_EN.parameters(), lr=lr, betas=(beta1, 0.999))\n","#optimizer_DE = optim.Adam(net_DE.parameters(), lr=lr, betas=(beta1, 0.999))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SelBN4wHdf2c","colab_type":"code","colab":{}},"source":["# Training Loop\n","\n","# Lists to keep track of progress\n","img_list = []\n","losses = []\n","iters = 0\n","\n","print(\"Starting Training Loop...\")\n","# For each epoch\n","for epoch in range(num_epochs):\n","    # For each batch in the dataloader\n","    for i, data in enumerate(dataloader, 0):\n","        #i [0]\n","        #data ([128,3,64,64],[128])\n","\n","        ############################\n","        # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))\n","        ###########################\n","        ## Train with all-real batch\n","        net_EN.zero_grad()\n","        net_DE.zero_grad()\n","        optimizer.zero_grad()\n","        # Format batch\n","        #real_cpu = data[0].cuda()\n","        x = data[0].cuda()\n","        #image = Variable(image).cuda()\n","\n","        mu, log_var, reparam = net_EN(x)\n","        #[128,100,1,1][128,100,1,1][128,100,1,1]\n","        #print(type(output_EN), len(output_EN), output_EN.shape)\n","\n","        #mu = mu.resize(128,100)\n","        #print(mu.shape)\n","        #log_var = log_var.view(128,100)\n","        reparam = reparam.view(-1,100,1,1)\n","\n","\n","        output = net_DE(reparam)\n","        #[128,3,64,64]\n","\n","        err = criteiron(output, x, mu, log_var)\n","        err.backward()\n","        optimizer.step()\n","\n","        # Output training stats\n","        if i % 10 == 0:\n","            print('[{} / {}] [{} / {}] Loss: {}'.format(epoch, num_epochs, i, len(dataloader), err))\n","\n","        # Save Losses for plotting later\n","        losses.append(err.item())\n","\n","        # Check how the generator is doing by saving G's output on fixed_noise\n","        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == len(dataloader)-1)):\n","            with torch.no_grad():\n","                fake = net_DE(fixed_noise).detach().cpu()\n","            img_list.append(vutils.make_grid(fake, padding=2, normalize=True))\n","\n","        iters += 1   "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uewjr3S4dkf9","colab_type":"code","colab":{}},"source":["plt.figure(figsize=(10,5))\n","plt.title(\"Loss During Training\")\n","plt.plot(losses,label=\"Loss\")\n","plt.xlabel(\"iterations\")\n","plt.ylabel(\"Loss\")\n","plt.legend()\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DdpQDJ9QdnYN","colab_type":"code","colab":{}},"source":["#%%capture\n","fig = plt.figure(figsize=(8,8))\n","plt.axis(\"off\")\n","ims = [[plt.imshow(np.transpose(i,(1,2,0)), animated=True)] for i in img_list]\n","ani = animation.ArtistAnimation(fig, ims, interval=1000, repeat_delay=1000, blit=True)\n","\n","HTML(ani.to_jshtml())"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5zSWm_FIb03_","colab_type":"code","colab":{}},"source":["# Grab a batch of real images from the dataloader\n","real_batch = next(iter(dataloader))\n","\n","# Plot the real images\n","plt.figure(figsize=(15,15))\n","plt.subplot(1,2,1)\n","plt.axis(\"off\")\n","plt.title(\"Real Images\")\n","plt.imshow(np.transpose(vutils.make_grid(real_batch[0].cuda()[:64], padding=5, normalize=True).cpu(),(1,2,0)))\n","\n","# Plot the fake images from the last epoch\n","plt.subplot(1,2,2)\n","plt.axis(\"off\")\n","plt.title(\"Fake Images\")\n","plt.imshow(np.transpose(img_list[-1],(1,2,0)))\n","plt.show()"],"execution_count":0,"outputs":[]}]}